
@mixin keyframes($animationName) {
    @-webkit-keyframes #{$animationName} {
        @content;
    }

    @-moz-keyframes #{$animationName} {
        @content;
    }

    @-o-keyframes #{$animationName} {
        @content;
    }

    @keyframes #{$animationName} {
        @content;
    }
}
// Container
@mixin container {
    padding-right: .9375rem;
    padding-left: .9375rem;
    margin-right: auto;
    margin-left: auto;
    @include clearfix;
}

@mixin animation($animate...) {
    $max: length($animate);
    $animations: '';

    @for $i from 1 through $max {
        $animations: #{$animations + nth($animate, $i)};

        @if $i < $max {
            $animations: #{$animations + ", "};
        }
    }

    -webkit-animation: $animations;
    /*-moz-animation: $animations;*/
    /*-o-animation: $animations;*/
    animation: $animations;
}

@mixin icon($content: false, $where: before) {
    text-decoration: none;

    &:#{$where} {

        @if $content {
            content: $content;
        }

        -moz-osx-font-smoothing: grayscale;
        -webkit-font-smoothing: antialiased;
        font-family: FontAwesome;
        font-style: normal;
        font-weight: normal;
        text-transform: none !important;
    }
}



@mixin selection($text-color, $b-) {
    ::selection {
        color: $text-color;
        background: $b-;
        text-shadow: none;
    }

    ::-webkit-selection {
        color: $text-color;
        background: $b-;
        text-shadow: none;
    }

    :active,
    :focus {
        outline: none;
    }
}

@function svg-url($svg) {

    $svg: str-replace($svg, '"', '\'');
    $svg: str-replace($svg, '%', '%25');
    $svg: str-replace($svg, '<', '%3C');
    $svg: str-replace($svg, '>', '%3E');
    $svg: str-replace($svg, '&', '%26');
    $svg: str-replace($svg, '#', '%23');
    $svg: str-replace($svg, '{', '%7B');
    $svg: str-replace($svg, '}', '%7D');
    $svg: str-replace($svg, ';', '%3B');

    @return url("data:image/svg+xml;charset=utf8,#{$svg}");
}
// Font

// Hover
@mixin hover {
    @if $enable-hover-media-query {
        // See Media Queries Level 4: http://drafts.csswg.org/mediaqueries/#hover
        // Currently shimmed by https://github.com/twbs/mq4-hover-shim
        @media (hover: hover) {
            &:hover {
                @content
            }
        }
    }
    @else {
        &:hover {
            @content
        }
    }
}

@mixin focus {
    @if $enable-hover-media-query {
        @media (focus: focus) {
            &:focus {
                @content
            }
        }
    }
    @else {
        &:focus {
            @content
        }
    }
}

@mixin hover-focus {
    @if $enable-hover-media-query {
        &:focus {
            @content
        }

        @include hover {
            @content
        }
    }
    @else {
        &:focus,
        &:hover {
            @content
        }
    }
}

@mixin plain-hover-focus {
    @if $enable-hover-media-query {
        &,
        &:focus {
            @content
        }

        @include hover {
            @content
        }
    }
    @else {
        &,
        &:focus,
        &:hover {
            @content
        }
    }
}

@mixin hover-focus-active {
    @if $enable-hover-media-query {
        &:focus,
        &:active {
            @content
        }

        @include hover {
            @content
        }
    }
    @else {
        &:focus,
        &:active,
        &:hover {
            @content
        }
    }
}

@mixin display-center() {
    display: inline-block;
    text-align: center;
    vertical-align: middle;
}

@mixin position($position, $top: null, $right: null, $bottom: null, $left: null) {
    position: $position;
    top: $top;
    left: $left;
    right: $right;
    bottom: $bottom;
}
// Base Style
@mixin btn {
    @include display-center;
    border: none;
    white-space: nowrap;
    touch-action: manipulation;
    cursor: pointer;
    user-select: none;

    @include hover-focus {
        text-decoration: none;
        @include transition(all .3s $cub);
    }

    &.focus {
        text-decoration: none;
    }

    &:active,
    &.active {
        background-image: none;
        outline: 0;
    }

    &.disabled,
    &:disabled,
    fieldset[disabled] & {
        cursor: $cursor-disabled;
        opacity: .65;
    }
}

// Size

// Style
@mixin btn-style($color: null, $hvr-color: null, $bg: null, $hvr-bg: null, $brd-width: null, $brd-style: null, $brd-color: null, $hvr-brd-color: null, $hvr-opacity: null, $line-height: null) {
    color: $color;
    background: $bg;
    border-width: $brd-width;
    border-style: $brd-style;
    border-color: $brd-color;
    line-height: $line-height;

    @include hover-focus {
        color: $hvr-color;
        background: $hvr-bg;
        border-color: $hvr-brd-color;
        opacity: $hvr-opacity;
    }
}
// Befor & After
@mixin before {
    @if $enable-before-after-media-query {
        @media (before: before) {
            &:before {
                @content
            }
        }
    }
    @else {
        &:before {
            @content
        }
    }
}

@mixin after {
    @if $enable-before-after-media-query {
        @media (after: after) {
            &:after {
                @content
            }
        }
    }
    @else {
        &:after {
            @content
        }
    }
}

@mixin before-after {
    @if $enable-before-after-media-query {
        &:before {
            @content
        }

        @include before {
            @content
        }
    }
    @else {
        &:before,
        &:after {
            @content
        }
    }
}

@mixin plain-before-after {
    @if $enable-before-after-media-query {
        &,
        &:before {
            @content
        }
    }
    @else {
        &,
        &:before,
        &:after {
            @content
        }
    }
}
// Placeholder
@mixin placeholder($color: $input-color-placeholder) {
    &::-webkit-input-placeholder {
        color: $color;
    }
    // Chrome and Safari
    &::-moz-placeholder {
        color: $color;
    }
    // Firefox 19+
    &:-ms-input-placeholder {
        color: $color;
    }
    // Internet Explorer 10+
    &::placeholder {
        color: $color;
    }
}
// Size
@mixin size($width, $height: $width) {
    width: $width;
    height: $height;
}
// Base Style

// Size


// Style


// Gradients

// Horizontal gradient, from left to right
//
// Creates two color stops, start and end, by specifying a color and position for each color stop.
@mixin gradient-horizontal($direction: to right, $start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
    background-image: linear-gradient($direction, $start-color $start-percent, $end-color $end-percent);
    background-repeat: repeat-x;
}

// Vertical gradient, from top to bottom
//
// Creates two color stops, start and end, by specifying a color and position for each color stop.
@mixin gradient-vertical($direction: to bottom, $start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
    background-image: linear-gradient($direction, $start-color $start-percent, $end-color $end-percent);
    background-repeat: repeat-x;
}

@mixin gradient-directional($start-color: #555, $end-color: #333, $deg: 45deg) {
    background-repeat: repeat-x;
    background-image: linear-gradient($deg, $start-color, $end-color);
}

@mixin gradient-horizontal-three-colors($direction: to right, $start-color: #00b3ee, $mid-color: #7a43b6, $color-stop: 50%, $end-color: #c3325f) {
    background-image: linear-gradient($direction, $start-color, $mid-color $color-stop, $end-color);
    background-repeat: no-repeat;
}

@mixin gradient-vertical-three-colors($start-color: #00b3ee, $mid-color: #7a43b6, $color-stop: 50%, $end-color: #c3325f) {
    background-image: linear-gradient($start-color, $mid-color $color-stop, $end-color);
    background-repeat: no-repeat;
}

@mixin gradient-radial($inner-color: #555, $outer-color: #333) {
    background-image: radial-gradient(circle, $inner-color, $outer-color);
    background-repeat: no-repeat;
}

@mixin gradient-striped($color: rgba(255,255,255,.15), $angle: 45deg) {
    background-image: linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
}
// Child
@mixin last-child {
    @if $enable-child-media-query {
        @media (last-child: last-child) {
            &:last-child {
                @content
            }
        }
    }
    @else {
        &:last-child {
            @content
        }
    }
}

@mixin first-child {
    @if $enable-child-media-query {
        @media (first-child: first-child) {
            &:first-child {
                @content
            }
        }
    }
    @else {
        &:first-child {
            @content
        }
    }
}

@mixin first-last-child {
    @if $enable-child-media-query {
        &:first-child {
            @content
        }

        &:last-child {
            @content
        }
    }
    @else {
        &:first-child,
        &:last-child {
            @content
        }
    }
}
// Overlay
@mixin overlay {
    @include position(relative);
    z-index: 1;

    @include before {
        @include position(absolute, $top: 0, $left: 0, $right: 0);
        z-index: -1;
        height: 100%;
        content: " ";
    }
}

// Overlay Style
@mixin overlay-style($color, $opacity) {
    @include before {
        background: rgba($color, $opacity);
    }
}
// Keyframes
@mixin keyframes($keyframes) {
    @-webkit-keyframes #{$keyframes} {
        @content;
    }

    @keyframes #{$keyframes} {
        @content;
    }
}
// Background
@mixin bg($position) {
    background-size: cover !important;
    background-position: $position !important;
}
// Horizontal Center Align
@mixin hor-center-align-row() {
    width: 100%;
    display: table;
}

@mixin hor-center-align-col() {
    display: table-cell;
    float: none;
    vertical-align: middle;
}
